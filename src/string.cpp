#include <iostream>

// 학습내용
// puts는 문자열만 출력이 가능하다
// 포인터 배열은 포인터로 이뤄진 배열, 배열 포인터는 배열을 가리키는 포인터
// 문자열을 유동적으로 할려면 동적 메모리 사용. 그렇지 않으면 읽지 전용에 접근하려해 에러 발생
// malloc사용시 앞에(타입*)으로 반환할 주소가 가리키는 자료형. int를 목적으로 사용시 (int*)로 해야함
// strlen은 \n전까지 길이를 가져오고, 앞에(자료형)을 넣어줘야함
// 매개변수 사용시 포인터 사용해 주소값을 보내줘야 일일히 자료형, 길이 맞추는 불편 해소와 원값 수정이 가능 

int main(){
// step1. 문자열을 입력받기 위해서 충분한 크기의 문자배열을 선언한다.
   char tmp[100]= "123";   // 충분한 공간을 확보하기 위한 임시문자배열을 선언한다.
   char *str;    // 동적 할당을 하기 위한 포인터 배열 변수를 선언한다.

    printf("%s \n", tmp);
    printf("%d \n", (int)strlen(tmp));

// step2. 문자열을 입력받는다.
    printf("문자열 : ");
      gets(tmp);                                 // gets() 함수는 입력하는 문자열 사이에 space가 가능하다.
// step3. 입력받은 문자열의 크기를 계산한 후 그 공간만큼 동적할당 받는다.
      str = (char*)malloc((int)strlen(tmp) + 1);   // malloc()이 주소를 반환해 주기 때문에 (char*)로 형식을 지정해 주어야 한다.
                                                 // strlen()는 NULL 전까지 문자열 길이를 불러오기 때문에 '+1'을 하여 "문자열\n"로 만들어 준다.
                                                 // 문자열 길이만큼만 저장하는 공간을 확보한다.
// step4. 할당받은 공간에 문자열을 대입한다.
    // 문자열, 배열 모두 시작점을 포인터로 가지고 있음. printf(s)로 값을 접근하기도 하지만, *으로도 접근?
      strcpy(str, tmp);                       // gets() 함수를 통해 입력받아 tmp에 저장한 문자열을 str[i]에 복사한다.

    printf("%s\n", str);
    free(str);


   return 0;
}